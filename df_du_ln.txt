磁盘的容量查看(df)：
                   -a:列出所有的文件系统，包括系统特有的 proc 等文件系统 
                   -k:以 KB 为单位显示 
                   -m:以 MB 为单位显示 
                   -h:以 GB,MB,KB 等格式显示 
                   -H:以 M=1000 K 代替 M=1024 K显示 
                   -T:连同该分区的文件系统名称一起列出 
                   -i:以 inode 的数量来显示

目录的容量查看(du)：
                   -a:列出所有文件与目录容量
                   -h:以 G/M 容量格式显示
                   -s:列出总量，不在列出目录下面文件量
                   -S:不包括子目录下的统计()
                   -k:以 KB 为单位显示
                   -m:以 MB 为单位显示

连接文件 ln：  #ln [-sf]源文件 目标文件
                    -s:如果不加任何参数默认是 hardlink ,加上-s 是 symboliclink
                    -f:如果目标文件存在，就主动将目标文件删除后创建

Hard link(硬连接)：只是在某个目录下新建一个文件名连接到某个 inode 上
                   
# 1. 创建文件 F1，文件系统为其分配一个 INODE(F1I)和若干 IBLOCK, 此时连接到 INODE(F1I)只有 F1因此 INODE(F1I)连接数为1
  
     [root@localhost ~] touch f1
     [root@localhost ~] ll -i f1
     846433 -rw-r--r-- 1 root root 0 02-24 09:33 f1 
  2. 创建 F1的 Hard Link FH1, Hard link 并不会分配新的 INODE 和 IBLOCK，只是将文件名连接都 F1的 INode 上 
     
     [root@localhost ~] ln f1 fh1
     [root@localhost ~] ll -i f1 fh1
     846433 -rw-r--r-- 2 root root 0 02-24 09:33 f1
     846433 -rw-r--r-- 2 root root 0 02-24 09:33 fh1
  # 可以看到 inode 有1变成了2，INODE 所指向的文件现在是 f1,fh1,指向的数据还是以前的那份iblock
硬连接的好处：
1.不会创建新的 INODE 和 iblock
2.硬连接文件或源文件删除不会影响其他(删除只是接触 inode 与文件的连接关系）


Symbolic link(软连接)：创建的文件时一个独立的新文件会占用一个新的 INODE 和若干 iblock

# 1. 创建文件 F2，文件系统为其分配一个 INODE(F2I)和若干 IBLOCK, 此时连接到 INODE(F2I)只有 F1因此 INODE(F2I)连接数为1
     
     [root@localhost ~]# touch f2
     [root@localhost ~]# ll -i f2
     846434 -rw-r--r-- 1 root root 0 02-24 09:49 f2
  2．创建 F2的符号文件 F2S, 文件系统会分配一个新的 INODE(F2SI)和若干 IBLOCK 给 F2S
     
     [root@localhost ~]# ln -s f2 f2s
     [root@localhost ~]# ll -i f2 f2s
     846434 -rw-r--r-- 1 root root 0 02-24 09:49 f2
     846435 lrwxrwxrwx 1 root root 2 02-24 09:51 f2s -> f2
  #  可以看到 f2,f2S 的 INODE 不是同一个，并且连接数都是1.说明他们是不同的独立文件
     1. f2s 对应的 INODE(F2SI)记录了 iblock 编号
     2. iblock 里记录了 F2的文件名
     3. 通过 F2的文件名就可以找到 F2对应的 INODE 和 iblock
                  