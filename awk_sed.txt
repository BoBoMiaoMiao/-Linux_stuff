正则表达式特殊符号：
#语系对应正则表达式的影响――LANG=C时：0,1,2,3,4,...A,B,C,...Z a,b,c,...z
                             LANG=ZH_CN时：0,1,2,3,4,...a,A,b,B,c,C...
#为了避免数字和字母的选取错误，正则表达式采用特殊符号来代表
[:alnum:]：代表英文大小写字符及数字。A-Z a-z 0-9
[:alpha:]：代表英文大小写字符 A-Z a-z
[:blank:]：代表空格与 Tab 键
[:cntrl:]：代表键盘上的控制按键 CR,LF,Tab,Del 等
[:digit:]：代表数据 0-9
[:graph:]：代表除了空格与 Tab 键的其他所有按键
[:upper:]：代表大写字符
[:print:]：代表任何可以被打印出来了的字符
[:punct:]：代表标点符号字符
[:space:]：代表会产生的空白的字符如 Tab 空格 CR
[:xdigit:]：代表十六进制的数字类型 0-9 A-F a-f

基础正则表达式字符:  |字符|意义与范例| |:--|:--------|

|^word| 意义：查找以 word 为行首的数据   grep ‘^#’ file.txt|

|Word$| 意义：查找以 word 为行尾的数据   grep ‘#$’ file.txt|

|. |    意义：代表一定有一个任意字符     (eae,ebe,e e)grep ‘e.e’ file.txt|

|* |    意义：重复0个到无穷个前一个字符  (es,ess,esss)grep ‘es*’ file.txt|

|[] |   意义：从字符集合中找出想要选取的字符 grep ‘g[ld]’  file.txt| #查找含有gl或gd的那一行

|[n1-n2] | 意义：从字符集合里找出想要选取的字符范围  grep ‘[0-9]’file.txt| #查找含有任意数字的那一行

|[^] |  意义：从字符集合中找出不要的字符或范围  grep ‘[^A-Z]’ file.txt| #查找不含大写字母的那一行

|{n,m}| 意义：连续 n 个到 m 个的前一个字符，如{n}则是连续n个前一个字符，如{n,}则是连续 n 个以上前一个字符
        查找 g 与 g 之间包含2个到3个 o 的字符串如：（goog gooog） grep‘{2,\3}’ file.txt|
        查找 g 与 g 之间包含2个 o 的字符串如：（goog） grep ‘{2}’ file.txt|
        查找 g 与 g 之间包含3个及以上o 的字符串如：（gooog,gooood,goo….od） grep ‘{3,}’ file.txt|

扩展正则表达式：
|+ |意义：重复一个或一个以上的字符      查找god,good,good等字符串： egrep ‘go+d’ file.txt|

|? |意义：0个或1个前一个字符            查找gd god： egrep ‘go?d’ file.txt|

| | |意义：用或的方式找出数个字符串     找出my ,own： egrep ‘my|own’ file.txt|

|() |意义：找出“组“的字符串           找出good 或glad： egrep ‘g(oo|la)d’ file.txt|

|()+ |意义：多个重复组的判别            找出Axy123123123C： egrep ‘Axy(123)+C’ file.txt|


sed:    #tr 操作的单元是字符，它针对字符进行删除和替换
         sed 操作单元的是行，它针对行进行删除和替换
        #sed 是管道命令它修改只是输入数据流，并不会修改文件本身,sed也可以直接修改文件，但不需要打开文件
         vim 是文本编辑器，它修改的是文件本身
sed [-nefr] ‘动作’
      -n             silent 模式，只将 sed 处理过的内容显示出来
      -e             设置多个 sed 动作
      -f             filename: 文件内记录 sed 脚本 scipt
      -r             sed 支持的扩展正则表达式语法（默认是基础正则表达式）
      -i             直接修改读取文件内容，而不是屏幕输出
             n1,n2   不一定存在
               a     新增，a 后面接字符串，这些字符在当前的下一行显示
               c     替换，c 后面接字符串，这些字符替换 n1-n2之间的行
               d     删除，删除 n1-n2之间的行
               i     添加，i 后面接字符串，这些字符在当前的上一行显示
               p     打印，打印 n1~n2行之间的数据 
               s     替换以关键字形式替换，并不是替换整行. sed ‘s/旧字符串/新字符串/g’’ 


awk:  #awk 是一个数据处理工具，将一行分为数个“字段”处理
      # awk 默认用空格或 tab 来分割一行数据，并将数据填充到$1,$2..中
      # awk 后方语句中非变量需使用双引号来定义，变量可以直接使用
      # 处理流程：
                 1.读入第一行，并将第一行的数据填入$0,$1,$2……等变量中
                 2.依据条件类型的限制，判断是否需要后面的动作
                 3.做完所有的动作与条件类型
                 4.若还有后续的行的数据，则重复1-3步骤
      #内置变量：= += -= *= /= %= ^= **= 赋值
                 ?:                      C 条件表达式
                 ||                      逻辑或
                 &&                      逻辑与
                 ~,~!                    匹配正则表达式和不匹配正则表达式
                 < <= > >= != ==         关系运算符
                 空格                    连接
                 + -                     加，减
                 * / &                   乘，除与求余
                 + - !                   加，减和逻辑非
                 ^,**                    求幂
                 ++ --                   增加或减少，作为前缀或后缀
                 $                       字段引用
                 in                      数组成员
awk ‘条件类型1 {动作1}条件类型2 {动作2}……’ filename
###
   查看$1 NR NF:[root@bogon ~] last -n 5 | awk '{print $1 "\t lines: " NR "\t cols: "NF }'
   仅输出$1==root的数据:[root@bogon ~] last -n 5 | awk '$1=="root" {print $1 "\t lines: " NR "\t cols: "NF }'

awk 关键字：
           BEGIN 关键字作用是预设，在读如第一行前面就执行 BEGIN 后面的动作（改变只能从第2行开始，第一行已经处理完毕）
           # [root@bogon ~] cat /etc/passwd|head -n 5 |awk 'BEGIN {FS=":"} NR=="1" {print"UID\tGID"} NR>="1" {print $1 "\t" $3}'

           END 操作将在扫描完全部的输入之后执行
           

                